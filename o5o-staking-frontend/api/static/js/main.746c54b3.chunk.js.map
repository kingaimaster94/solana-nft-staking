{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["JSONPrettyMon","require","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","CenteredGrid","useState","fruit","setFruit","qty","setQty","index","setIndex","res","setRes","a","requestOptions","method","headers","body","JSON","stringify","fruitName","fetch","response","json","fruitBox","classes","className","Grid","container","item","xs","Paper","Button","onClick","variant","TextField","onChange","e","target","value","id","label","defaultValue","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.746c54b3.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\n\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\n\nimport JSONPretty from 'react-json-pretty'\n\nlet JSONPrettyMon = require('react-json-pretty/dist/monikai')\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\n\nfunction CenteredGrid() {\n  const [fruit, setFruit] = useState(13);\n  const [qty, setQty] = useState(1);\n  const [index, setIndex] = useState(0);\n  const [res, setRes] = useState();\n\n  async function callApi() {\n    \n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n                                fruitName : fruit,\n                                qty : qty\n                            })\n    };\n    const response = await fetch('https://4hjv5gp5kf.execute-api.ap-southeast-2.amazonaws.com/prod/fruitbox', requestOptions);\n    const fruitBox = await response.json();\n    setRes(fruitBox);\n  }\n\n  async function getFruitBox() {\n    \n    const requestOptions = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n    };\n    const response = await fetch('https://4hjv5gp5kf.execute-api.ap-southeast-2.amazonaws.com/prod/fruitbox', requestOptions);\n    const fruitBox = await response.json();\n    setRes(fruitBox);\n  }\n\n  async function getFruitBoxIndex() {\n    \n    const requestOptions = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n    };\n    const response = await fetch(`https://4hjv5gp5kf.execute-api.ap-southeast-2.amazonaws.com/prod/fruitbox/${index}`, requestOptions);\n    const fruitBox = await response.json();\n    setRes(fruitBox);\n  }\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>API</Paper>\n        </Grid>\n        {/* Get the whole FruitBox */}\n        <Grid item xs={12}>\n          <Paper className={classes.paper}><Button onClick={getFruitBox} variant=\"contained\" color=\"primary\">Get FruitBox</Button></Paper>\n        </Grid>\n        {/* Add Fruit to FruitBox */}\n        <Grid item xs={4}>\n         \n        </Grid>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <TextField onChange={e => setFruit(e.target.value)}  id=\"filled-basic\" label=\"Fruit\" variant=\"filled\" />\n          </Paper>\n        </Grid>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <TextField defaultValue={qty} onChange={e => setQty(e.target.value)} id=\"filled-basic\" label=\"Quantity\" variant=\"filled\" /></Paper>\n        </Grid> \n        <Grid item xs={4}>\n          <Button onClick={callApi} variant=\"contained\" color=\"primary\">Add Fruit</Button>\n        </Grid>\n        <Grid item xs={6}></Grid>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <TextField defaultValue={index} onChange={e => setIndex(e.target.value)} id=\"filled-basic\" label=\"Index\" variant=\"filled\" /></Paper>\n        </Grid>\n        {/* Get one tiem by index zero basesd from fruitbox */}\n        <Grid item xs={2}>\n          <Button onClick={getFruitBoxIndex} variant=\"contained\" color=\"primary\">Get Index</Button>\n        </Grid>\n        <Grid item xs={2}></Grid>\n        <Grid item xs={12}>\n          <JSONPretty data={res} theme={JSONPrettyMon}></JSONPretty>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default CenteredGrid;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}